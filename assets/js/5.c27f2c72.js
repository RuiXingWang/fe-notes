(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{169:function(e,_,t){e.exports=t.p+"assets/img/JS疑惑表达式Q&A.f29e6dfc.png"},173:function(e,_,t){"use strict";t.r(_);var v={data:function(){return{ifImgShow:!1}}},r=t(0),o=Object(r.a)(v,function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("div",{staticClass:"content"},[e._m(0),e._v(" "),v("p",[e._v("比如请说出以下这些表达式的结果：")]),e._v(" "),e._m(1),e._v(" "),v("p",[e._v("如果想知道正确答案的话把表达式粘贴到浏览器的控制台执行即可")]),e._v(" "),[v("div",[v("button",{on:{click:function(_){e.ifImgShow=!e.ifImgShow}}},[e._v("懒人一步洞晓答案")]),e._v(" "),v("br"),e._v(" "),e.ifImgShow?v("img",{attrs:{src:t(169)}}):e._e()])],e._v(" "),v("p",[e._v("接下来的内容就是讲解这些表达式的结果是在什么样的原理下得出的")]),e._v(" "),v("p",[e._v("解决以上的问题的关键在于要搞明白三点：")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),v("p",[e._v("当操作数的数据类型不一致时，会根据以下规则进行转化：")]),e._v(" "),e._m(8),e._v(" "),v("p",[e._v("所以根据以上规则，我们就能解释：")]),e._v(" "),e._m(9),e._v(" "),v("p",[e._v("接下来我们说一说值得注意的情况")]),e._v(" "),e._m(10),e._v(" "),v("p",[e._v("根据 "),v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F36438034%2Fwhy-is-no-longer-nan-in-chrome-console",target:"_blank",rel:"noopener noreferrer"}},[e._v("Stackoverflow上的回答"),v("OutboundLink")],1),e._v(" 这是因为 Chrome devtools 在执行代码的时候隐式的给表达式添加了括号"),v("code",[e._v("()")]),e._v("，实际上执行的代码是"),v("code",[e._v("({} + {})")]),e._v("。如果你在 IE 11 中执行"),v("code",[e._v("({} + {})")]),e._v("，就会得到"),v("code",[e._v("[object Object][object Object]")]),e._v("的结果")]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),v("p",[e._v("更全面"),v("code",[e._v("==")]),e._v("和"),v("code",[e._v("===")]),e._v("的比较规则请参考: "),v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fdmitripavlutin.com%2Fthe-legend-of-javascript-equality-operator%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("The legend of JavaScript equality operator"),v("OutboundLink")],1)]),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),v("p",[e._v("在这个表达式中出现了三种操作符，分别是")]),e._v(" "),e._m(26),e._v(" "),v("p",[e._v("根据操作符的"),v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FOperator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[e._v("优先次序表"),v("OutboundLink")],1),e._v("，我们能确定操作符的优先级依次是: "),v("code",[e._v("[]")]),e._v(" > 一元操作符"),v("code",[e._v("+")]),e._v(" > "),v("code",[e._v("++")]),e._v(" > "),v("code",[e._v("+")])]),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),v("p",[e._v("本文也同时发布在我的知乎专栏"),v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Ffront-end",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端技术漫游指南"),v("OutboundLink")],1),e._v("上，欢迎大家关注")]),e._v(" "),e._m(33),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fdmitripavlutin.com%2Fjavascriptss-addition-operator-demystified%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript addition operator in details"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fdmitripavlutin.com%2Fthe-legend-of-javascript-equality-operator%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("The legend of JavaScript equality operator"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F9032856%2Fwhat-is-the-explanation-for-these-bizarre-javascript-behaviours-mentioned-in-the",target:"_blank",rel:"noopener noreferrer"}},[e._v("What is the explanation for these bizarre JavaScript behaviours mentioned in the 'Wat' talk for CodeMash 2012?"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F36438034%2Fwhy-is-no-longer-nan-in-chrome-console",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why is {} + {} no longer NaN in Chrome console?"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F24383788%2Fwhy-does-javascript-handle-the-plus-and-minus-operators-between-strings-and-numb",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why does JavaScript handle the plus and minus operators between strings and numbers differently?"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FOperator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[e._v("Operator precedence"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://link.juejin.im/?target=http%3A%2F%2Flearnjavascript.co.uk%2Freference%2Foperators%2Fmember.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Member operators"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FisNaN",target:"_blank",rel:"noopener noreferrer"}},[e._v("isNaN()"),v("OutboundLink")],1)])])],2)},[function(){var e=this.$createElement,_=this._self._c||e;return _("h1",{attrs:{id:"js-中让人疑惑的表达式以及背后的原理。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js-中让人疑惑的表达式以及背后的原理。","aria-hidden":"true"}},[this._v("#")]),this._v(" JS 中让人疑惑的表达式以及背后的原理。")])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ul",[t("li",[t("code",[e._v("1 + '1'")])]),e._v(" "),t("li",[t("code",[e._v("1 - '1'")])]),e._v(" "),t("li",[t("code",[e._v("'2' + '2' - '2'")])]),e._v(" "),t("li",[t("code",[e._v("[] + []")])]),e._v(" "),t("li",[t("code",[e._v("{} + {}")])]),e._v(" "),t("li",[t("code",[e._v("[] + {}")])]),e._v(" "),t("li",[t("code",[e._v("{} + []")])]),e._v(" "),t("li",[t("code",[e._v("[] + {} === {} + []")])]),e._v(" "),t("li",[t("code",[e._v("{} + [] === [] + {}")])]),e._v(" "),t("li",[t("code",[e._v("[+false] + [+false] + [+false]")])]),e._v(" "),t("li",[t("code",[e._v("[+false] + [+false] + [+false] - [+false]")])]),e._v(" "),t("li",[t("code",[e._v("'1' == true")])]),e._v(" "),t("li",[t("code",[e._v("parseInt('infinity') == 0 / 0")])]),e._v(" "),t("li",[t("code",[e._v("1 < 2 < 3")])]),e._v(" "),t("li",[t("code",[e._v("3 > 2 > 1")])]),e._v(" "),t("li",[t("code",[e._v("isNaN(false)")])]),e._v(" "),t("li",[t("code",[e._v("isNaN(null)")])]),e._v(" "),t("li",[t("code",[e._v("[[][[]]+[]][+[]][++[+[]][+[]]]")])])])},function(){var e=this.$createElement,_=this._self._c||e;return _("ol",[_("li",[this._v("操作符的使用方法和优先级")]),this._v(" "),_("li",[this._v("操作数在操作符的上下文中数据类型转化规则")]),this._v(" "),_("li",[this._v("语法中的特例")])])},function(){var e=this.$createElement,_=this._self._c||e;return _("h2",{attrs:{id:"操作符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作符","aria-hidden":"true"}},[this._v("#")]),this._v(" "),_("code",[this._v("+")]),this._v(" 操作符")])},function(){var e=this.$createElement,_=this._self._c||e;return _("p",[_("code",[this._v("+")]),this._v("在 JavaScript 中有三个作用：")])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ol",[t("li",[e._v("连接字符串："),t("code",[e._v("var result = 'Hello' + 'World'")])]),e._v(" "),t("li",[e._v("计算数字之和："),t("code",[e._v("var result = 1 + 2")])]),e._v(" "),t("li",[e._v("作为一元操作符："),t("code",[e._v("+variable")])])])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("p",[e._v("在表达式中"),t("code",[e._v("+")]),e._v("是操作符（operator），操作符操作的对象（上面例子中的"),t("code",[e._v("Hello")]),e._v("、 "),t("code",[e._v("World")]),e._v("、 "),t("code",[e._v("1")]),e._v("、 "),t("code",[e._v("2")]),e._v("）名为操作数（operand）")])},function(){var e=this.$createElement,_=this._self._c||e;return _("p",[this._v("一元"),_("code",[this._v("+")]),this._v("操作符的运算规则是："),_("code",[this._v("ToNumber(ToPrimitive(operand))")]),this._v("，也就是把任意类型都转化为数字类型。")])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ul",[t("li",[t("p",[e._v("如果至少一个操作数是对象数据类型（"),t("code",[e._v("object")]),e._v("），则需要将它转化为基础类型（"),t("code",[e._v("primitive")]),e._v("），即字符串、数字或者布尔")]),e._v(" "),t("ol",[t("li",[e._v("如果对象是"),t("code",[e._v("Date")]),e._v("类型，那么调用"),t("code",[e._v("toString()")]),e._v("方法")]),e._v(" "),t("li",[e._v("否则优先调用 "),t("code",[e._v("valueOf()")]),e._v(" 方法")]),e._v(" "),t("li",[e._v("如果"),t("code",[e._v("valueof()")]),e._v("方法不存在或者并没有返回一个基础类型，那么调用"),t("code",[e._v("toString()")])]),e._v(" "),t("li",[e._v("当数组转化为基础类型时，JavaScript 会使用"),t("code",[e._v("join(',')")]),e._v("方法")]),e._v(" "),t("li",[e._v("单纯的 Javascript 对象 "),t("code",[e._v("{}")]),e._v(" 转化的结果是 "),t("code",[e._v("[object Object]")])])])]),e._v(" "),t("li",[t("p",[e._v("转化之后，如果至少一个操作数是字符串类型，那么另一个操作数也需要转化为字符串类型，然后执行连接操作")])]),e._v(" "),t("li",[t("p",[e._v("在其他的情况下，两个操作数都转化为数值类型，并且执行加法操作")])]),e._v(" "),t("li",[t("p",[e._v("如果两个操作数都是基础类型，操作符会判断至少一个是字符串类型并且执行连接操作。其他情况都转化为数字并且求和")])])])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ul",[t("li",[t("code",[e._v("1 + '1'")]),e._v(" 的结果是 "),t("code",[e._v("'11'")]),e._v("，因为其中一个是操作数是字符串，所以另一个操作数也被转化为字符串，并且执行字符串连接操作")]),e._v(" "),t("li",[t("code",[e._v("[] + []")]),e._v(" 的结果是 "),t("code",[e._v("''")]),e._v(" 空字符串，因为数组是对象类型，转化为基础类型的结果是空字符串，拼接之后仍然是空字符串")]),e._v(" "),t("li",[t("code",[e._v("[] + {}")]),e._v(" 的结果是 "),t("code",[e._v("[object Object]")]),e._v("，因为操作数有对象类型的关系，两个操作数都需要转化为基础类型，"),t("code",[e._v("[]")]),e._v("转化为基础类型的结果是"),t("code",[e._v("''")]),e._v("，"),t("code",[e._v("{}")]),e._v("转化为基础类型的结果是"),t("code",[e._v("[object Object]")]),e._v("，最后字符串拼接的结果仍然是"),t("code",[e._v("[object Object]")])])])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ul",[t("li",[t("p",[t("code",[e._v("{} + []")]),e._v(" 的结果是"),t("code",[e._v("0")]),e._v("。因为在这个表达式中，开头"),t("code",[e._v("{}")]),e._v("并不是空对象的字面量，而是被当作空的代码块。事实上这个表达式的值就是"),t("code",[e._v("+[]")]),e._v("的结果，即"),t("code",[e._v("Number([].join(','))")]),e._v("，即为"),t("code",[e._v("0")])])]),e._v(" "),t("li",[t("p",[e._v("更奇怪的是"),t("code",[e._v("{} + {}")]),e._v("这个表达式，在不同的浏览器中执行会得到不同的结果。\n按照上面的例子，我们可以同理推出这个表达式的值实际上是"),t("code",[e._v("+{}")]),e._v("的值，即最后的结果是"),t("code",[e._v("Number([object Object])")]),e._v("，即"),t("code",[e._v("NaN")]),e._v("。在 IE 11 中的执行结果却是是如此，但是如果在 Chrome 中执行，你得到的结果是 "),t("code",[e._v("[object Object][object Object]")]),e._v("。")])])])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ul",[t("li",[t("p",[e._v("虽然上面我们已经明确了 "),t("code",[e._v("[] + {}")]),e._v(" 的结果是 "),t("code",[e._v("[object Object]")]),e._v("，而 "),t("code",[e._v("{} + []")]),e._v(" 的结果是"),t("code",[e._v("0")]),e._v("，但是如果把他们进行比较的话："),t("code",[e._v("[] + {} === {} + []")]),e._v("结果会是"),t("code",[e._v("true")]),e._v("。因为右侧的"),t("code",[e._v("{}")]),e._v("跟随在"),t("code",[e._v("===")]),e._v("之后的关系，不再被认为是空的代码块，而是字面量的空对象，所以两侧的结果都是"),t("code",[e._v("[object Object]")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("{} + [] === [] + {}")]),e._v(" 同样是一个有歧义的结果，理论上来说表达式的返回值是"),t("code",[e._v("false")]),e._v("，在 IE 11 中确实如此，但是在 Chrome 的 devtools 中返回 "),t("code",[e._v("true")]),e._v("，原因仍然是表达式被放在"),t("code",[e._v("()")]),e._v("中执行")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("[+false] + [+false] + [+false]")]),e._v("的结果也可想而知了，"),t("code",[e._v("+false")]),e._v("的结果是"),t("code",[e._v("false")]),e._v("转化为数字"),t("code",[e._v("0")]),e._v("，之后"),t("code",[e._v("[0]")]),e._v("又被转化为基础类型字符串"),t("code",[e._v("'0'")]),e._v("，所以表达式最后的结果是"),t("code",[e._v("'000'")])])])])},function(){var e=this.$createElement,_=this._self._c||e;return _("h2",{attrs:{id:"操作符-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作符-2","aria-hidden":"true"}},[this._v("#")]),this._v(" "),_("code",[this._v("-")]),this._v("操作符")])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("p",[e._v("虽然"),t("code",[e._v("-")]),e._v("操作符和"),t("code",[e._v("+")]),e._v("操作符看看上去性质相同，但"),t("code",[e._v("-")]),e._v("操作符只有一个功能，就是数值上的相减。它会尝试把非数值类型的操作数转化为数值类型，如果转化的结果是"),t("code",[e._v("NaN")]),e._v(", 那么表达式的结果可想而知也就是"),t("code",[e._v("NaN")]),e._v("，如果全部都转化成功，则执行减法操作，所以")])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ul",[t("li",[t("code",[e._v("1 - '1'")]),e._v(" 实际上执行的是 "),t("code",[e._v("1 - 1")]),e._v("，结果为 "),t("code",[e._v("0")])]),e._v(" "),t("li",[t("code",[e._v("'2' + '2' - '2'")]),e._v(" 表达式首先要遵循从左至右的执行顺序，"),t("code",[e._v("'2' + '2'")]),e._v("的执行的是字符串拼接，结果是"),t("code",[e._v("'22'")]),e._v("，在接下来的"),t("code",[e._v("'22' - '2'")]),e._v("计算中两个操作数都成功的转化为了数字，结果是数字相减的结果"),t("code",[e._v("20")])]),e._v(" "),t("li",[t("code",[e._v("[+false] + [+false] + [+false] - [+false]")]),e._v("表达式实际上执行的是"),t("code",[e._v("'000' - '0'")]),e._v("，最后的结果也就是数字"),t("code",[e._v("0")])])])},function(){var e=this.$createElement,_=this._self._c||e;return _("h2",{attrs:{id:"操作符-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作符-3","aria-hidden":"true"}},[this._v("#")]),this._v(" "),_("code",[this._v("==")]),this._v("操作符")])},function(){var e=this.$createElement,_=this._self._c||e;return _("p",[this._v("在 JavaScript 中"),_("code",[this._v("===")]),this._v("称为恒等操作符（The identity operator），"),_("code",[this._v("==")]),this._v("称为相等操作符（The equality operator）。因为篇幅关系在这里我们简单的针对题目聊聊后者")])},function(){var e=this.$createElement,_=this._self._c||e;return _("p",[this._v("如果"),_("code",[this._v("==")]),this._v("操作符的操作数的数据类型不同：")])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ol",[t("li",[e._v("如果一个操作数是"),t("code",[e._v("null")]),e._v("，并且另外一个操作数是"),t("code",[e._v("undefined")]),e._v("，他们是相等的")]),e._v(" "),t("li",[e._v("如果一个操作数是数值类型，并且另一个是字符串类型，那么把字符串类型转化为数值类型再进行比较")]),e._v(" "),t("li",[e._v("如果一个操作数是布尔类型，那么把"),t("code",[e._v("true")]),e._v("转化为1，"),t("code",[e._v("false")]),e._v("转化为0在进行比较")]),e._v(" "),t("li",[e._v("如果一个操作数是对象，另一个操作数是数字或者字符串，那么把对象转化为基本类型再进行比较")])])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ul",[t("li",[e._v("根据以上规则，在计算表达式"),t("code",[e._v("'1' == true")]),e._v("时，首先将"),t("code",[e._v("true")]),e._v("转化为数字"),t("code",[e._v("1")]),e._v("，此时表达式中同时存在数值和字符串类型，再把字符串"),t("code",[e._v("'1'")]),e._v("转化为数字"),t("code",[e._v("1")]),e._v("，最终"),t("code",[e._v("1 == 1")]),e._v("当然成立")]),e._v(" "),t("li",[e._v("表达式"),t("code",[e._v("parseInt('infinity') == 0 / 0")]),e._v("实际上是在判断"),t("code",[e._v("NaN == NaN")]),e._v("，这样的比较是一个特例，无论是在"),t("code",[e._v("==")]),e._v("比较还是"),t("code",[e._v("===")]),e._v("比较中，"),t("code",[e._v("NaN")]),e._v("不会与任何东西相等；或者说只要有任意操作数是"),t("code",[e._v("NaN")]),e._v("，那么表达式就会返回"),t("code",[e._v("false")])])])},function(){var e=this.$createElement,_=this._self._c||e;return _("p",[this._v("比较运算符"),_("code",[this._v(">")]),this._v("和"),_("code",[this._v("<")]),this._v("也遵循相似的规则: 1. 优先将字符串转化为数字进行比较；2. 将布尔类型转化为数字再进行比较，")])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ul",[t("li",[e._v("在表达式"),t("code",[e._v("1 < 2 < 3")]),e._v(" 中，首先执行"),t("code",[e._v("1 < 2")]),e._v("，结果为"),t("code",[e._v("true")]),e._v("，但是在比较"),t("code",[e._v("true < 3")]),e._v("的过程中，需要把"),t("code",[e._v("true")]),e._v("转化为数值类型"),t("code",[e._v("1")]),e._v("，最终比较"),t("code",[e._v("1 < 3")]),e._v("，返回值为 "),t("code",[e._v("true")])]),e._v(" "),t("li",[e._v("同理在表达式"),t("code",[e._v("3 > 2 > 1")]),e._v("中，最终比较的其实是"),t("code",[e._v("true > 1")]),e._v("，也即是"),t("code",[e._v("1 > 1")]),e._v("当然返回的是"),t("code",[e._v("false")])])])},function(){var e=this.$createElement,_=this._self._c||e;return _("h2",{attrs:{id:"isnan"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#isnan","aria-hidden":"true"}},[this._v("#")]),this._v(" "),_("code",[this._v("isNaN")])])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("p",[e._v('"NaN"是"Not a Number"的缩写，我们以为'),t("code",[e._v("isNaN")]),e._v("能够直接用来判断值是否是数字类型，但实际上并不可以。因为"),t("code",[e._v("isNaN")]),e._v("首先会强制将参数转化为数值类型，再进行判断。\n这也就不难解释为什么"),t("code",[e._v("isNaN(false)")]),e._v("和"),t("code",[e._v("isNaN(null)")]),e._v("返回都是"),t("code",[e._v("true")]),e._v("，因为"),t("code",[e._v("false")]),e._v("和"),t("code",[e._v("null")]),e._v("都能被成功转化为数字"),t("code",[e._v("0")]),e._v(", 所以对于"),t("code",[e._v("isNaN")]),e._v("来说，它们是数字")])},function(){var e=this.$createElement,_=this._self._c||e;return _("h2",{attrs:{id:"结束"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结束","aria-hidden":"true"}},[this._v("#")]),this._v(" 结束")])},function(){var e=this.$createElement,_=this._self._c||e;return _("p",[this._v("最后我们以表达式"),_("code",[this._v("[[][[]]+[]][+[]][++[+[]][+[]]]")]),this._v("作为文章的结尾")])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ul",[t("li",[e._v("成员操作符: "),t("code",[e._v("[]")])]),e._v(" "),t("li",[e._v("一元操作符: "),t("code",[e._v("+")])]),e._v(" "),t("li",[e._v("作为求和或者连接字符串作用的操作符: "),t("code",[e._v("+")])]),e._v(" "),t("li",[e._v("自增操作符: "),t("code",[e._v("++")])])])},function(){var e=this.$createElement,_=this._self._c||e;return _("p",[this._v("所以根据优先级我们首先可以计算出表达式的"),_("code",[this._v("+[]")]),this._v("部分，并且将表达式的这一部分用计算结果替换掉: "),_("code",[this._v("[[][[]]+[]][0][++[0][0]]")])])},function(){var e=this.$createElement,_=this._self._c||e;return _("p",[this._v("接下来我们把表达式拆分为三部分看待: "),_("code",[this._v("[ [][[]]+[] ] [0] [ ++[0][0] ]")]),this._v("。如果还是不清晰的话，三部分从左到右分别是：")])},function(){var e=this.$createElement,_=this._self._c||e;return _("ol",[_("li",[_("code",[this._v("[ [][[]]+[] ]")])]),this._v(" "),_("li",[_("code",[this._v("[0]")])]),this._v(" "),_("li",[_("code",[this._v("[ ++[0][0] ]")])])])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("p",[e._v("我们先看第一部分中"),t("code",[e._v("+")]),e._v("前面的 "),t("code",[e._v("[][[]]")]),e._v(" 操作数，第一个"),t("code",[e._v("[]")]),e._v("是空数组，而紧跟着的"),t("code",[e._v("[[]]")]),e._v("是属性访问器（成员操作符），属性访问器内的"),t("code",[e._v("[]")]),e._v("会被强制转化为字符串类型，最终的结果即是空字符串"),t("code",[e._v("''")]),e._v("，所以第一个操作数的最终结果其实是"),t("code",[e._v("[]['']")]),e._v("，即是"),t("code",[e._v("undefined")]),e._v("，而又因为"),t("code",[e._v("+")]),e._v("操作符的规则，最终"),t("code",[e._v("[][[]]+[]")]),e._v("表达式的结果是字符串"),t("code",[e._v("'undefined'")]),e._v("，那么现阶段表达式的结果是"),t("code",[e._v("['undefined'][0][++[0][0]]")]),e._v("，即"),t("code",[e._v("'undefined'[++[0][0]]")])])},function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("p",[e._v("接下来我们解决第三部分: "),t("code",[e._v("[++[0][0]]")]),e._v("，我已经知道成员操作符"),t("code",[e._v("[]")]),e._v("的优先级要高于自增操作符"),t("code",[e._v("++")]),e._v(", 所以关于表达式"),t("code",[e._v("++[0][0]")]),e._v("，我们需要首先计算"),t("code",[e._v("[0][0]")]),e._v("，结果是"),t("code",[e._v("0")]),e._v("，之后计算"),t("code",[e._v("++0")]),e._v("的结果即是"),t("code",[e._v("1")])])},function(){var e=this.$createElement,_=this._self._c||e;return _("p",[this._v("所以最终表达式转化为了"),_("code",[this._v("'undefined'[1]")]),this._v("，最终的结果即是"),_("code",[this._v("'n'")])])},function(){var e=this.$createElement,_=this._self._c||e;return _("h3",{attrs:{id:"参考文章"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文章","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考文章")])}],!1,null,null,null);_.default=o.exports}}]);